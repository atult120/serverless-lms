service: lms-howto-service
frameworkVersion: "3.34.0"

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-south-1
  stage: ${opt:stage, 'dev'}
  environment:
    DB_HOST: ${self:custom.env.${self:provider.stage}.DB_HOST}
    DB_USER: ${self:custom.env.${self:provider.stage}.DB_USER}
    DB_PASS: ${self:custom.env.${self:provider.stage}.DB_PASS}
    DB_NAME: ${self:custom.env.${self:provider.stage}.DB_NAME}
    COGNITO_USER_POOL_ID: ${self:custom.env.${self:provider.stage}.COGNITO_USER_POOL_ID}
    COGNITO_CLIENT_ID: ${self:custom.env.${self:provider.stage}.COGNITO_CLIENT_ID}
    AUTH_MODE: ${self:custom.env.${self:provider.stage}.AUTH_MODE}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - rds-db:connect
          Resource: "*" # fine-tune with resource ARNs
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
          Resource: "arn:aws:s3:::your-bucket-name/*"

functions:
  createHowToVideos: ${file(serverless-functions.yml):${self:provider.stage}.createHowToVideos}
  getHowToVideos: ${file(serverless-functions.yml):${self:provider.stage}.getHowToVideos}
  updateHowToVideo: ${file(serverless-functions.yml):${self:provider.stage}.updateHowToVideo}
  analytics: ${file(serverless-functions.yml):${self:provider.stage}.analytics}
  login: ${file(serverless-functions.yml):${self:provider.stage}.login}

resources:
  Resources:
    ApiGatewayAuthorizer:
      Type: "AWS::ApiGateway::Authorizer"
      Condition: IsNotLocal
      Properties:
        Name: CognitoAuthorizer
        Type: COGNITO_USER_POOLS
        RestApiId:
          Ref: ApiGatewayRestApi
        IdentitySource: "method.request.header.Authorization"
        ProviderARNs:
          - "arn:aws:cognito-idp:${self:provider.region}:${aws:accountId}:userpool/${self:custom.env.${self:provider.stage}.COGNITO_USER_POOL_ID}"
  Conditions:
    IsNotLocal:
      Fn::Not:
        - Fn::Equals:
            - ${self:provider.stage}
            - local

plugins:
  - serverless-dotenv-plugin
  - serverless-pseudo-parameters
  - serverless-offline # for local dev
custom:
  dotenv:
    path: .env
  env: ${file(env-config.js)}

package:
  individually: true
  exclude:
    - node_modules/**
    - src/**/*.spec.ts
  include:
    - dist/**
    - node_modules/**
    - package.json
